/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MmButton {
        "appearence": string;
        "text": string;
    }
    interface MmModal {
        "appearence": string;
        "buttons": string;
        "closeIcon": string;
        "header": string;
        "isopen": boolean;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface MmModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMmModalElement;
}
declare global {
    interface HTMLMmButtonElement extends Components.MmButton, HTMLStencilElement {
    }
    var HTMLMmButtonElement: {
        prototype: HTMLMmButtonElement;
        new (): HTMLMmButtonElement;
    };
    interface HTMLMmModalElementEventMap {
        "action": any;
    }
    interface HTMLMmModalElement extends Components.MmModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMmModalElementEventMap>(type: K, listener: (this: HTMLMmModalElement, ev: MmModalCustomEvent<HTMLMmModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMmModalElementEventMap>(type: K, listener: (this: HTMLMmModalElement, ev: MmModalCustomEvent<HTMLMmModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMmModalElement: {
        prototype: HTMLMmModalElement;
        new (): HTMLMmModalElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "mm-button": HTMLMmButtonElement;
        "mm-modal": HTMLMmModalElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface MmButton {
        "appearence"?: string;
        "text"?: string;
    }
    interface MmModal {
        "appearence"?: string;
        "buttons"?: string;
        "closeIcon"?: string;
        "header"?: string;
        "isopen"?: boolean;
        "onAction"?: (event: MmModalCustomEvent<any>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "mm-button": MmButton;
        "mm-modal": MmModal;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mm-button": LocalJSX.MmButton & JSXBase.HTMLAttributes<HTMLMmButtonElement>;
            "mm-modal": LocalJSX.MmModal & JSXBase.HTMLAttributes<HTMLMmModalElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
